{"version":3,"sources":["ListInfo.jsx","List.jsx","App.js","serviceWorker.js","index.js"],"names":["ListInfo","info","this","props","listInfo","react_default","a","createElement","className","population","climate","terrain","films","length","Component","List","planet","map","pl","console","log","key","url","name","src_ListInfo_0","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getPlanet","bind","assertThisInitialized","getPlanets","axios","get","_this2","id","arguments","undefined","then","response","setState","data","results","_this3","count","randId","Math","floor","random","src_List_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SA6CeA,0LApBb,IAAMC,EAAOC,KAAKC,MAAMC,SAMxB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAEdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,YAAON,EAAKQ,aAC5BJ,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,YAAON,EAAKS,UACzBL,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,YAAON,EAAKU,WAE1BN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,eAA+CP,EAAKW,MAAMC,OAA1D,kBApCmBC,cCqBRC,0LAhBP,OADeb,KAAKC,MAAMa,OAErBC,IAAI,SAACC,GAEX,OADAC,QAAQC,IAAIF,GAEXb,EAAAC,EAAAC,cAAA,OAAKc,IAAKH,EAAGI,KACZjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACIH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBU,EAAGK,OAE3DlB,EAAAC,EAAAC,cAACiB,EAAD,CAAUpB,SAAUc,cAZVJ,8BCgDJW,qBA7CX,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,KAAMC,KAED6B,MAAQ,CACThB,OAAQ,IAGZU,EAAKO,UAAYP,EAAKO,UAAUC,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACjBA,EAAKU,WAAaV,EAAKU,WAAWF,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KARHA,4EAYf,OAAOW,IAAMC,IAAI,qEAGJ,IAAAC,EAAArC,KAAPsC,EAAOC,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GACT,OAAOJ,IAAMC,IAAI,gCAAkCE,GAClDG,KAAK,SAACC,GACQ,KAAPJ,EACAD,EAAKM,SAAS,CAAE7B,OAAQ4B,EAASE,KAAKC,UAEtCR,EAAKM,SAAS,CAAE7B,OAAQ,CAAC4B,EAASE,sDAK3B,IAAAE,EAAA9C,KACfA,KAAKkC,aAAaO,KAAK,SAACC,GACpB,IAAMK,EAAQL,EAASE,KAAKG,MACtBC,EAASC,KAAKC,MAAOD,KAAKE,SAAWJ,EAAS,GACpDD,EAAKf,UAAUiB,sCAId,IACElC,EAAUd,KAAK8B,MAAfhB,OACP,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAC+C,EAAD,CAAMtC,OAAQA,YAxCZF,cCOEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.0a465bb2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ListInfo.css';\r\n\r\nclass ListInfo extends Component {\r\n\r\n\t/*constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            expanded: false,\r\n        }\r\n\r\n        this.open = this.open.bind(this);\r\n        this.close = this.close.bind(this);\r\n    }*/\r\n\r\n    /*open() {\r\n    \tthis.setState({ expanded: !this.state.expanded })\r\n    }\r\n\r\n    close() {\r\n    \tthis.setState({ expanded: !this.state.expanded })\r\n    }*/\r\n\t\r\n\trender() {\r\n\t\tconst info = this.props.listInfo;\r\n\r\n\t\t/*if(!this.state.expanded) {\r\n\t\t\treturn <p className=\"btn btn-info\" onClick={this.open}>Show info</p>\r\n\t\t}*/\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"planet_infos__wrap\">\r\n\t\t\t\t{/*<p className=\"btn btn-danger\" onClick={this.close}>Hide Info</p>*/}\r\n\t\t\t\t<ul className=\"planet_infos_list\">\r\n\t\t\t\t\t<li>Population: <span>{info.population}</span></li>\r\n\t\t\t\t\t<li>Climate: <span>{info.climate}</span></li>\r\n\t\t\t\t\t<li>Terrain: <span>{info.terrain}</span></li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<p className=\"planet_infos_films\">Featured in {info.films.length} films</p>\r\n\t\t\t</div>\r\n\t\t);\r\n    }\r\n}\r\n\r\nexport default ListInfo;","import React, { Component } from 'react';\r\nimport ListInfo from './ListInfo';\r\nimport './List.css';\r\n\r\nclass List extends Component {\r\n\t\r\n\trender() {\r\n        const planet = this.props.planet;\r\n        return (\r\n    \t\tplanet.map((pl) => {\r\n    \t\t\tconsole.log(pl)\r\n    \t\t\treturn (\r\n    \t\t\t\t<div key={pl.url}>\r\n    \t\t\t\t\t<div className=\"planet__header\">\r\n                            <h1 className=\"planet__header_name\">{pl.name}</h1>\r\n                        </div>\r\n    \t\t\t\t\t<ListInfo listInfo={pl} />\r\n    \t\t\t\t</div>\r\n    \t\t\t)\r\n    \t\t})\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport List from './List';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            planet: [],\n        }\n\n        this.getPlanet = this.getPlanet.bind(this);\n        this.getPlanets = this.getPlanets.bind(this);\n    }\n\n    getPlanets() {\n        return axios.get('https://swapi.co/api/planets/')\n    }\n\n    getPlanet(id='') {\n        return axios.get('https://swapi.co/api/planets/' + id)\n        .then((response) => {\n            if (id === '') {\n                this.setState({ planet: response.data.results })\n            } else {\n                this.setState({ planet: [response.data] })\n            }\n        })\n    }\n\n    componentDidMount(){\n        this.getPlanets().then((response) => {\n            const count = response.data.count\n            const randId = Math.floor((Math.random() * count) + 1)\n            this.getPlanet(randId)\n        })\n    }\n\n    render() {\n        const {planet} = this.state;\n        return (\n            <div className=\"planet__wrap\">\n                <List planet={planet} />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}